{"version":3,"sources":["../transaction_with_predefined_abi.ts"],"sourcesContent":["/* eslint-disable no-console */\n\n/**\n * This example shows how to use the Aptos client to create accounts, fund them, and transfer between them.\n */\n\nimport {\n  Account,\n  AccountAddress,\n  Aptos,\n  APTOS_COIN,\n  AptosConfig,\n  EntryFunctionABI,\n  Network,\n  NetworkToNetworkName,\n  parseTypeTag,\n  SimpleTransaction,\n  TypeTagAddress,\n  TypeTagU64,\n  U64,\n} from \"@aptos-labs/ts-sdk\";\n\nconst APTOS_COIN_TYPE = parseTypeTag(APTOS_COIN);\nconst COIN_STORE = \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\";\nconst ALICE_INITIAL_BALANCE = 100_000_000;\nconst BOB_INITIAL_BALANCE = 100;\nconst TRANSFER_AMOUNT = 100;\n\n// Default to devnet, but allow for overriding\nconst APTOS_NETWORK: Network = NetworkToNetworkName[process.env.APTOS_NETWORK] || Network.DEVNET;\n\n/**\n * Prints the balance of an account\n * @param aptos\n * @param name\n * @param address\n * @returns {Promise<*>}\n *\n */\nconst balance = async (aptos: Aptos, name: string, address: AccountAddress) => {\n  type Coin = { coin: { value: string } };\n  const resource = await aptos.getAccountResource<Coin>({\n    accountAddress: address,\n    resourceType: COIN_STORE,\n  });\n  const amount = Number(resource.coin.value);\n\n  console.log(`${name}'s balance is: ${amount}`);\n  return amount;\n};\n\nasync function timeSubmission(\n  aptos: Aptos,\n  signer: Account,\n  buildTxn: () => Promise<SimpleTransaction>,\n): Promise<void> {\n  const start = performance.now();\n  const rawTxn = await buildTxn();\n  const buildTime = performance.now();\n  const senderAuthenticator = await aptos.sign({ signer, transaction: rawTxn });\n  const signTime = performance.now();\n  const submittedTxn = await aptos.transaction.submit.simple({ transaction: rawTxn, senderAuthenticator });\n  const submitTime = performance.now();\n  await aptos.waitForTransaction({ transactionHash: submittedTxn.hash });\n  const endTime = performance.now();\n  const builtLatency = buildTime - start;\n  const signLatency = signTime - buildTime;\n  const submitLatency = submitTime - signTime;\n  const e2eLatency = endTime - start;\n\n  console.log(\n    `Time for building: ${builtLatency}ms | signing ${signLatency}ms submission: ${submitLatency}ms | total E2E: ${e2eLatency}ms`,\n  );\n}\n\nconst example = async () => {\n  console.log(\"This example will show you how to increase performance of known entry functions\");\n\n  // Setup the client\n  const config = new AptosConfig({ network: APTOS_NETWORK });\n  const aptos = new Aptos(config);\n\n  // Create two accounts\n  const alice = Account.generate();\n  const bob = Account.generate();\n\n  console.log(\"=== Addresses ===\\n\");\n  console.log(`Alice's address is: ${alice.accountAddress}`);\n  console.log(`Bob's address is: ${bob.accountAddress}`);\n\n  // Fund the accounts\n  console.log(\"\\n=== Funding accounts ===\\n\");\n\n  await aptos.fundAccount({\n    accountAddress: alice.accountAddress,\n    amount: ALICE_INITIAL_BALANCE,\n  });\n\n  await aptos.fundAccount({\n    accountAddress: bob.accountAddress,\n    amount: BOB_INITIAL_BALANCE,\n  });\n\n  // Show the balances\n  console.log(\"\\n=== Balances ===\\n\");\n  const aliceBalance = await balance(aptos, \"Alice\", alice.accountAddress);\n  const bobBalance = await balance(aptos, \"Bob\", bob.accountAddress);\n\n  if (aliceBalance !== ALICE_INITIAL_BALANCE) throw new Error(\"Alice's balance is incorrect\");\n  if (bobBalance !== BOB_INITIAL_BALANCE) throw new Error(\"Bob's balance is incorrect\");\n\n  // At this point, we'll time transfers with and without ABI, and with or without BCS encoded\n  const transferAbi: EntryFunctionABI = {\n    typeParameters: [{ constraints: [] }],\n    parameters: [new TypeTagAddress(), new TypeTagU64()],\n  };\n  // Transfer between users\n\n  console.log(\"\\n=== Remote ABI, normal inputs ===\\n\");\n  const aliceAddressString = alice.accountAddress.toString();\n  const bobAddressString = alice.accountAddress.toString();\n  await timeSubmission(aptos, alice, async () =>\n    aptos.transaction.build.simple({\n      sender: aliceAddressString,\n      data: {\n        function: \"0x1::coin::transfer\",\n        typeArguments: [APTOS_COIN_TYPE],\n        functionArguments: [bobAddressString, TRANSFER_AMOUNT],\n      },\n    }),\n  );\n\n  console.log(\"\\n=== Remote ABI, BCS inputs ===\\n\");\n  await timeSubmission(aptos, alice, async () =>\n    aptos.transaction.build.simple({\n      sender: alice.accountAddress,\n      data: {\n        function: \"0x1::coin::transfer\",\n        typeArguments: [APTOS_COIN_TYPE],\n        functionArguments: [bob.accountAddress, new U64(TRANSFER_AMOUNT)],\n      },\n    }),\n  );\n\n  console.log(\"\\n=== Local ABI, normal inputs ===\\n\");\n  await timeSubmission(aptos, alice, async () =>\n    aptos.transaction.build.simple({\n      sender: alice.accountAddress,\n      data: {\n        function: \"0x1::coin::transfer\",\n        typeArguments: [APTOS_COIN_TYPE],\n        functionArguments: [bobAddressString, TRANSFER_AMOUNT],\n        abi: transferAbi,\n      },\n    }),\n  );\n\n  console.log(\"\\n=== Local ABI, BCS inputs ===\\n\");\n  await timeSubmission(aptos, alice, async () =>\n    aptos.transaction.build.simple({\n      sender: alice.accountAddress,\n      data: {\n        function: \"0x1::coin::transfer\",\n        typeArguments: [APTOS_COIN_TYPE],\n        functionArguments: [bob.accountAddress, new U64(TRANSFER_AMOUNT)],\n        abi: transferAbi,\n      },\n    }),\n  );\n\n  console.log(\"\\n=== Local ABI, BCS inputs, sequence number already cached ===\\n\");\n  const accountData = await aptos.account.getAccountInfo({ accountAddress: alice.accountAddress });\n  const sequenceNumber = BigInt(accountData.sequence_number);\n  await timeSubmission(aptos, alice, async () =>\n    aptos.transaction.build.simple({\n      sender: alice.accountAddress,\n      data: {\n        function: \"0x1::coin::transfer\",\n        typeArguments: [APTOS_COIN_TYPE],\n        functionArguments: [bob.accountAddress, new U64(TRANSFER_AMOUNT)],\n        abi: transferAbi,\n      },\n      options: {\n        accountSequenceNumber: sequenceNumber,\n      },\n    }),\n  );\n\n  console.log(\"\\n=== Local ABI, BCS inputs, sequence number and gas already cached ===\\n\");\n  await timeSubmission(aptos, alice, async () =>\n    aptos.transaction.build.simple({\n      sender: alice.accountAddress,\n      data: {\n        function: \"0x1::coin::transfer\",\n        typeArguments: [APTOS_COIN_TYPE],\n        functionArguments: [bob.accountAddress, new U64(TRANSFER_AMOUNT)],\n        abi: transferAbi,\n      },\n      options: {\n        accountSequenceNumber: sequenceNumber + 1n,\n        gasUnitPrice: 100,\n        maxGasAmount: 1000,\n      },\n    }),\n  );\n};\n\nexample();\n"],"mappings":"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","names":[]}