{"version":3,"sources":["../../sponsored_transactions/simple_sponsored_transaction.ts"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\n\n/**\n * Example to submit a simple sponsored transaction where Alice transfers APT coin to Bob\n * with a sponsor account to pay for the gas fee\n */\nimport \"dotenv\";\nimport { Account, Aptos, AptosConfig, Network, NetworkToNetworkName } from \"@aptos-labs/ts-sdk\";\n\nconst ALICE_INITIAL_BALANCE = 100_000_000;\nconst SPONSOR_INITIAL_BALANCE = 100_000_000;\nconst BOB_INITIAL_BALANCE = 0;\nconst TRANSFER_AMOUNT = 10;\n// Default to devnet, but allow for overriding\nconst APTOS_NETWORK: Network = NetworkToNetworkName[process.env.APTOS_NETWORK] || Network.DEVNET;\n\nconst example = async () => {\n  console.log(\n    \"This example will create three accounts (Alice, Bob and Sponsor), fund Alice and Sponsor, transfer between Alice and Bob with sponsor to pay the gas fee.\",\n  );\n\n  // Setup the client\n  const aptosConfig = new AptosConfig({ network: APTOS_NETWORK });\n  const aptos = new Aptos(aptosConfig);\n\n  // Create three accounts\n  const alice = Account.generate();\n  const bob = Account.generate();\n  const sponsor = Account.generate();\n\n  // Variables to hold Alice and sponsor accounts address\n  const aliceAddress = alice.accountAddress;\n  const bobAddress = bob.accountAddress;\n  const sponsorAddress = sponsor.accountAddress;\n\n  console.log(\"=== Addresses ===\\n\");\n  console.log(`Alice's address is: ${aliceAddress}`);\n  console.log(`Bob's address is: ${bobAddress}`);\n  console.log(`Sponsor's address is: ${sponsorAddress}`);\n\n  // Fund Alice and sponsor accounts\n  await aptos.fundAccount({ accountAddress: aliceAddress, amount: ALICE_INITIAL_BALANCE });\n  await aptos.fundAccount({ accountAddress: sponsorAddress, amount: SPONSOR_INITIAL_BALANCE });\n\n  // Show account balances\n  const aliceBalanceBefore = await aptos.getAccountCoinsData({ accountAddress: aliceAddress });\n  const sponsorBalanceBefore = await aptos.getAccountCoinsData({ accountAddress: sponsorAddress });\n\n  console.log(\"\\n=== Balances ===\\n\");\n  console.log(`Alice's balance is: ${aliceBalanceBefore[0].amount}`);\n  console.log(`Bobs's balance is: ${BOB_INITIAL_BALANCE}`);\n  console.log(`Sponsor's balance is: ${sponsorBalanceBefore[0].amount}`);\n\n  if (aliceBalanceBefore[0].amount !== ALICE_INITIAL_BALANCE) throw new Error(\"Alice's balance is incorrect\");\n  if (sponsorBalanceBefore[0].amount !== SPONSOR_INITIAL_BALANCE) throw new Error(\"Sponsors's balance is incorrect\");\n\n  // Generate a fee payer (aka sponsor) transaction\n  // with Alice as the sender and sponsor as the fee payer\n  console.log(\"\\n=== Submitting Transaction ===\\n\");\n  const transaction = await aptos.transaction.build.simple({\n    sender: aliceAddress,\n    withFeePayer: true,\n    data: {\n      function: \"0x1::aptos_account::transfer\",\n      functionArguments: [bob.accountAddress, TRANSFER_AMOUNT],\n    },\n  });\n\n  // Alice signs\n  const senderSignature = aptos.transaction.sign({ signer: alice, transaction });\n\n  // Sponsor signs\n  const sponsorSignature = aptos.transaction.signAsFeePayer({ signer: sponsor, transaction });\n\n  // Submit the transaction to chain\n  const committedTxn = await aptos.transaction.submit.simple({\n    transaction,\n    senderAuthenticator: senderSignature,\n    feePayerAuthenticator: sponsorSignature,\n  });\n\n  console.log(`Submitted transaction: ${committedTxn.hash}`);\n  const response = await aptos.waitForTransaction({ transactionHash: committedTxn.hash });\n\n  console.log(\"\\n=== Balances after transfer ===\\n\");\n  const aliceBalanceAfter = await aptos.getAccountCoinsData({\n    accountAddress: aliceAddress,\n    minimumLedgerVersion: BigInt(response.version),\n  });\n  const bobBalanceAfter = await aptos.getAccountCoinsData({ accountAddress: bobAddress });\n  const sponsorBalanceAfter = await aptos.getAccountCoinsData({ accountAddress: sponsorAddress });\n\n  // Bob should have the transfer amount\n  if (bobBalanceAfter[0].amount !== TRANSFER_AMOUNT) throw new Error(\"Bob's balance after transfer is incorrect\");\n\n  // Alice should have the initial balance minus tranfer amount\n  if (aliceBalanceAfter[0].amount !== ALICE_INITIAL_BALANCE - TRANSFER_AMOUNT)\n    throw new Error(\"Alice's balance after transfer is incorrect\");\n\n  // Sponsor should have the initial balance minus gas\n  if (sponsorBalanceAfter[0].amount >= SPONSOR_INITIAL_BALANCE)\n    throw new Error(\"Sponsor's balance after transfer is incorrect\");\n\n  console.log(`Alice's final balance is: ${aliceBalanceAfter[0].amount}`);\n  console.log(`Bob's balance is: ${bobBalanceAfter[0].amount}`);\n  console.log(`Sponsor's balance is: ${sponsorBalanceAfter[0].amount}`);\n};\n\nexample();\n"],"mappings":"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","names":[]}