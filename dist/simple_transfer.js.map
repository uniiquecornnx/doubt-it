{"version":3,"sources":["../simple_transfer.ts"],"sourcesContent":["/* eslint-disable no-console */\n\n/**\n * This example shows how to use the Aptos client to create accounts, fund them, and transfer between them.\n */\n\nimport {\n  Account,\n  AccountAddress,\n  Aptos,\n  AptosConfig,\n  Network,\n  NetworkToNetworkName,\n  parseTypeTag,\n} from \"@aptos-labs/ts-sdk\";\n\n// TODO: There currently isn't a way to use the APTOS_COIN in the COIN_STORE due to a regex\nconst APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\nconst COIN_STORE = \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\";\nconst ALICE_INITIAL_BALANCE = 100_000_000;\nconst BOB_INITIAL_BALANCE = 100;\nconst TRANSFER_AMOUNT = 100;\n\n// Default to devnet, but allow for overriding\nconst APTOS_NETWORK: Network = NetworkToNetworkName[process.env.APTOS_NETWORK] || Network.DEVNET;\n\n/**\n * Prints the balance of an account\n * @param aptos\n * @param name\n * @param address\n * @returns {Promise<*>}\n *\n */\nconst balance = async (aptos: Aptos, name: string, address: AccountAddress) => {\n  type Coin = { coin: { value: string } };\n  const resource = await aptos.getAccountResource<Coin>({\n    accountAddress: address,\n    resourceType: COIN_STORE,\n  });\n  const amount = Number(resource.coin.value);\n\n  console.log(`${name}'s balance is: ${amount}`);\n  return amount;\n};\n\nconst example = async () => {\n  console.log(\"This example will create two accounts (Alice and Bob), fund them, and transfer between them.\");\n\n  // Setup the client\n  const config = new AptosConfig({ network: APTOS_NETWORK });\n  const aptos = new Aptos(config);\n\n  // Create two accounts\n  const alice = Account.generate();\n  const bob = Account.generate();\n\n  console.log(\"=== Addresses ===\\n\");\n  console.log(`Alice's address is: ${alice.accountAddress}`);\n  console.log(`Bob's address is: ${bob.accountAddress}`);\n\n  // Fund the accounts\n  console.log(\"\\n=== Funding accounts ===\\n\");\n\n  const aliceFundTxn = await aptos.fundAccount({\n    accountAddress: alice.accountAddress,\n    amount: ALICE_INITIAL_BALANCE,\n  });\n  console.log(\"Alice's fund transaction: \", aliceFundTxn);\n\n  const bobFundTxn = await aptos.fundAccount({\n    accountAddress: bob.accountAddress,\n    amount: BOB_INITIAL_BALANCE,\n  });\n  console.log(\"Bob's fund transaction: \", bobFundTxn);\n\n  // Show the balances\n  console.log(\"\\n=== Balances ===\\n\");\n  const aliceBalance = await balance(aptos, \"Alice\", alice.accountAddress);\n  const bobBalance = await balance(aptos, \"Bob\", bob.accountAddress);\n\n  if (aliceBalance !== ALICE_INITIAL_BALANCE) throw new Error(\"Alice's balance is incorrect\");\n  if (bobBalance !== BOB_INITIAL_BALANCE) throw new Error(\"Bob's balance is incorrect\");\n\n  // Transfer between users\n  const txn = await aptos.transaction.build.simple({\n    sender: alice.accountAddress,\n    data: {\n      function: \"0x1::coin::transfer\",\n      typeArguments: [parseTypeTag(APTOS_COIN)],\n      functionArguments: [bob.accountAddress, TRANSFER_AMOUNT],\n    },\n  });\n\n  console.log(\"\\n=== Transfer transaction ===\\n\");\n  const committedTxn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n\n  await aptos.waitForTransaction({ transactionHash: committedTxn.hash });\n  console.log(`Committed transaction: ${committedTxn.hash}`);\n\n  console.log(\"\\n=== Balances after transfer ===\\n\");\n  const newAliceBalance = await balance(aptos, \"Alice\", alice.accountAddress);\n  const newBobBalance = await balance(aptos, \"Bob\", bob.accountAddress);\n\n  // Bob should have the transfer amount\n  if (newBobBalance !== TRANSFER_AMOUNT + BOB_INITIAL_BALANCE)\n    throw new Error(\"Bob's balance after transfer is incorrect\");\n\n  // Alice should have the remainder minus gas\n  if (newAliceBalance >= ALICE_INITIAL_BALANCE - TRANSFER_AMOUNT)\n    throw new Error(\"Alice's balance after transfer is incorrect\");\n};\n\nexample();\n"],"mappings":";AAMA;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAGP,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,wBAAwB;AAC9B,IAAM,sBAAsB;AAC5B,IAAM,kBAAkB;AAGxB,IAAM,gBAAyB,qBAAqB,QAAQ,IAAI,aAAa,KAAK,QAAQ;AAU1F,IAAM,UAAU,OAAO,OAAc,MAAc,YAA4B;AAE7E,QAAM,WAAW,MAAM,MAAM,mBAAyB;AAAA,IACpD,gBAAgB;AAAA,IAChB,cAAc;AAAA,EAChB,CAAC;AACD,QAAM,SAAS,OAAO,SAAS,KAAK,KAAK;AAEzC,UAAQ,IAAI,GAAG,IAAI,kBAAkB,MAAM,EAAE;AAC7C,SAAO;AACT;AAEA,IAAM,UAAU,YAAY;AAC1B,UAAQ,IAAI,8FAA8F;AAG1G,QAAM,SAAS,IAAI,YAAY,EAAE,SAAS,cAAc,CAAC;AACzD,QAAM,QAAQ,IAAI,MAAM,MAAM;AAG9B,QAAM,QAAQ,QAAQ,SAAS;AAC/B,QAAM,MAAM,QAAQ,SAAS;AAE7B,UAAQ,IAAI,qBAAqB;AACjC,UAAQ,IAAI,uBAAuB,MAAM,cAAc,EAAE;AACzD,UAAQ,IAAI,qBAAqB,IAAI,cAAc,EAAE;AAGrD,UAAQ,IAAI,8BAA8B;AAE1C,QAAM,eAAe,MAAM,MAAM,YAAY;AAAA,IAC3C,gBAAgB,MAAM;AAAA,IACtB,QAAQ;AAAA,EACV,CAAC;AACD,UAAQ,IAAI,8BAA8B,YAAY;AAEtD,QAAM,aAAa,MAAM,MAAM,YAAY;AAAA,IACzC,gBAAgB,IAAI;AAAA,IACpB,QAAQ;AAAA,EACV,CAAC;AACD,UAAQ,IAAI,4BAA4B,UAAU;AAGlD,UAAQ,IAAI,sBAAsB;AAClC,QAAM,eAAe,MAAM,QAAQ,OAAO,SAAS,MAAM,cAAc;AACvE,QAAM,aAAa,MAAM,QAAQ,OAAO,OAAO,IAAI,cAAc;AAEjE,MAAI,iBAAiB;AAAuB,UAAM,IAAI,MAAM,8BAA8B;AAC1F,MAAI,eAAe;AAAqB,UAAM,IAAI,MAAM,4BAA4B;AAGpF,QAAM,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,IAC/C,QAAQ,MAAM;AAAA,IACd,MAAM;AAAA,MACJ,UAAU;AAAA,MACV,eAAe,CAAC,aAAa,UAAU,CAAC;AAAA,MACxC,mBAAmB,CAAC,IAAI,gBAAgB,eAAe;AAAA,IACzD;AAAA,EACF,CAAC;AAED,UAAQ,IAAI,kCAAkC;AAC9C,QAAM,eAAe,MAAM,MAAM,yBAAyB,EAAE,QAAQ,OAAO,aAAa,IAAI,CAAC;AAE7F,QAAM,MAAM,mBAAmB,EAAE,iBAAiB,aAAa,KAAK,CAAC;AACrE,UAAQ,IAAI,0BAA0B,aAAa,IAAI,EAAE;AAEzD,UAAQ,IAAI,qCAAqC;AACjD,QAAM,kBAAkB,MAAM,QAAQ,OAAO,SAAS,MAAM,cAAc;AAC1E,QAAM,gBAAgB,MAAM,QAAQ,OAAO,OAAO,IAAI,cAAc;AAGpE,MAAI,kBAAkB,kBAAkB;AACtC,UAAM,IAAI,MAAM,2CAA2C;AAG7D,MAAI,mBAAmB,wBAAwB;AAC7C,UAAM,IAAI,MAAM,6CAA6C;AACjE;AAEA,QAAQ;","names":[]}