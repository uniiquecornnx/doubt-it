{"version":3,"sources":["../multisig_v2.ts"],"sourcesContent":["/* eslint-disable no-console */\n\n/**\n * This examples demonstrate the new multisig account module (MultiSig V2) and transaction execution flow\n * where in that module, there is no offchain signature aggregation step.\n * Each owner sends its transactions to the chain on its own, and so the \"voting\" process occurs onchain.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/sources/multisig_account.move}\n *\n * This example demonstrates different interaction with the module\n * - create a multi sig account\n * - create a multi sig transaction\n * - approve a multi sig transaction\n * - reject a multi sig transaction\n * - execute a multi sig transaction\n * - fetch multi sig account info\n *\n */\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport {\n  Account,\n  Aptos,\n  AptosConfig,\n  Network,\n  NetworkToNetworkName,\n  MoveString,\n  generateRawTransaction,\n  TransactionPayloadMultiSig,\n  MultiSig,\n  AccountAddress,\n  InputViewFunctionData,\n  SimpleTransaction,\n  generateTransactionPayload,\n} from \"@aptos-labs/ts-sdk\";\n\n// Default to devnet, but allow for overriding\nconst APTOS_NETWORK: Network = NetworkToNetworkName[process.env.APTOS_NETWORK] || Network.DEVNET;\n\n// Setup the client\nconst config = new AptosConfig({ network: APTOS_NETWORK });\nconst aptos = new Aptos(config);\n\n// Generate 3 accounts that will be the owners of the multisig account.\nconst owner1 = Account.generate();\nconst owner2 = Account.generate();\nconst owner3 = Account.generate();\n\n// Global var to hold the created multi sig account address\nlet multisigAddress: string;\n\n// Generate an account that will recieve coin from a transfer transaction\nconst recipient = Account.generate();\n\n// Global var to hold the generated coin transfer transaction payload\nlet transactionPayload: TransactionPayloadMultiSig;\n\n// Generate an account to add and then remove from the multi sig account\nconst owner4 = Account.generate();\n\n// HELPER FUNCTIONS //\n\nconst getNumberOfOwners = async (): Promise<void> => {\n  const multisigAccountResource = await aptos.getAccountResource<{ owners: Array<string> }>({\n    accountAddress: multisigAddress,\n    resourceType: \"0x1::multisig_account::MultisigAccount\",\n  });\n  console.log(\"Number of Owners:\", multisigAccountResource.owners.length);\n};\n\nconst getSignatureThreshold = async (): Promise<void> => {\n  const multisigAccountResource = await aptos.getAccountResource<{ num_signatures_required: number }>({\n    accountAddress: multisigAddress,\n    resourceType: \"0x1::multisig_account::MultisigAccount\",\n  });\n  console.log(\"Signature Threshold:\", multisigAccountResource.num_signatures_required);\n};\n\nconst fundOwnerAccounts = async () => {\n  await aptos.fundAccount({ accountAddress: owner1.accountAddress, amount: 100_000_000 });\n  await aptos.fundAccount({ accountAddress: owner2.accountAddress, amount: 100_000_000 });\n  await aptos.fundAccount({ accountAddress: owner3.accountAddress, amount: 100_000_000 });\n  console.log(`owner1: ${owner1.accountAddress.toString()}`);\n  console.log(`owner2: ${owner2.accountAddress.toString()}`);\n  console.log(`owner3: ${owner3.accountAddress.toString()}`);\n};\n\nconst settingUpMultiSigAccount = async () => {\n  console.log(\"Setting up a 2-of-3 multisig account...\");\n\n  // Step 1: Setup a 2-of-3 multisig account\n  // ===========================================================================================\n  // Get the next multisig account address. This will be the same as the account address of the multisig account we'll\n  // be creating.\n  const payload: InputViewFunctionData = {\n    function: \"0x1::multisig_account::get_next_multisig_account_address\",\n    functionArguments: [owner1.accountAddress.toString()],\n  };\n  [multisigAddress] = await aptos.view<[string]>({ payload });\n  // Create the multisig account with 3 owners and a signature threshold of 2.\n  const createMultisig = await aptos.transaction.build.simple({\n    sender: owner1.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::create_with_owners\",\n      functionArguments: [\n        [owner2.accountAddress, owner3.accountAddress],\n        2,\n        [\"Example\"],\n        [new MoveString(\"SDK\").bcsToBytes()],\n      ],\n    },\n  });\n  const owner1Authenticator = aptos.transaction.sign({ signer: owner1, transaction: createMultisig });\n  const res = await aptos.transaction.submit.simple({\n    senderAuthenticator: owner1Authenticator,\n    transaction: createMultisig,\n  });\n  await aptos.waitForTransaction({ transactionHash: res.hash });\n\n  console.log(\"Multisig Account Address:\", multisigAddress);\n\n  // should be 2\n  await getSignatureThreshold();\n\n  // should be 3\n  await getNumberOfOwners();\n};\n\nconst fundMultiSigAccount = async () => {\n  console.log(\"Funding the multisig account...\");\n  // Fund the multisig account for transfers.\n  await aptos.fundAccount({ accountAddress: multisigAddress, amount: 100_000_000 });\n};\n\nconst createMultiSigTransferTransaction = async () => {\n  console.log(\"Creating a multisig transaction to transfer coins...\");\n\n  transactionPayload = await generateTransactionPayload({\n    multisigAddress,\n    function: \"0x1::aptos_account::transfer\",\n    functionArguments: [recipient.accountAddress, 1_000_000],\n    aptosConfig: config,\n  });\n\n  // Simulate the transfer transaction to make sure it passes\n  const transactionToSimulate = await generateRawTransaction({\n    aptosConfig: config,\n    sender: owner2.accountAddress,\n    payload: transactionPayload,\n  });\n\n  const simulateMultisigTx = await aptos.transaction.simulate.simple({\n    signerPublicKey: owner2.publicKey,\n    transaction: new SimpleTransaction(transactionToSimulate),\n  });\n\n  console.log(\"simulateMultisigTx\", simulateMultisigTx);\n\n  // Build create_transaction transaction\n  const createMultisigTx = await aptos.transaction.build.simple({\n    sender: owner2.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::create_transaction\",\n      functionArguments: [multisigAddress, transactionPayload.multiSig.transaction_payload.bcsToBytes()],\n    },\n  });\n\n  // Owner 2 signs the transaction\n  const createMultisigTxAuthenticator = aptos.transaction.sign({ signer: owner2, transaction: createMultisigTx });\n\n  // Submit the transaction to chain\n  const createMultisigTxResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: createMultisigTxAuthenticator,\n    transaction: createMultisigTx,\n  });\n  await aptos.waitForTransaction({ transactionHash: createMultisigTxResponse.hash });\n};\n\nconst executeMultiSigTransferTransaction = async () => {\n  // Owner 2 can now execute the transactions as it already has 2 approvals (from owners 2 and 3).\n  console.log(\"Owner 2 can now execute the transfer transaction as it already has 2 approvals (from owners 2 and 3).\");\n\n  const rawTransaction = await generateRawTransaction({\n    aptosConfig: config,\n    sender: owner2.accountAddress,\n    payload: transactionPayload,\n  });\n\n  const transaction = new SimpleTransaction(rawTransaction);\n\n  const owner2Authenticator = aptos.transaction.sign({ signer: owner2, transaction });\n  const transferTransactionReponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: owner2Authenticator,\n    transaction,\n  });\n  await aptos.waitForTransaction({ transactionHash: transferTransactionReponse.hash });\n};\n\nconst checkBalance = async () => {\n  const accountResource = await aptos.getAccountResource<{ coin: { value: number } }>({\n    accountAddress: recipient.accountAddress,\n    resourceType: \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\",\n  });\n\n  console.log(\"Recipient's balance after transfer\", accountResource.coin.value);\n};\n\nconst createMultiSigTransferTransactionWithPayloadHash = async () => {\n  console.log(\"Creating another multisig transaction using payload hash...\");\n  // Step 3: Create another multisig transaction to send 1_000_000 coins but use payload hash instead.\n  // ===========================================================================================\n  const transferTxPayloadHash = sha3Hash.create();\n  transferTxPayloadHash.update(transactionPayload.multiSig.transaction_payload.bcsToBytes());\n\n  // Build create_transaction_with_hash transaction\n  const createMultisigTxWithHash = await aptos.transaction.build.simple({\n    sender: owner2.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::create_transaction_with_hash\",\n      functionArguments: [multisigAddress, transferTxPayloadHash.digest()],\n    },\n  });\n  // Owner 2 signs the transaction\n  const createMultisigTxWithHashAuthenticator = aptos.transaction.sign({\n    signer: owner2,\n    transaction: createMultisigTxWithHash,\n  });\n  // Submit the transaction to chain\n  const createMultisigTxWithHashResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: createMultisigTxWithHashAuthenticator,\n    transaction: createMultisigTxWithHash,\n  });\n  await aptos.waitForTransaction({ transactionHash: createMultisigTxWithHashResponse.hash });\n};\n\nconst executeMultiSigTransferTransactionWithPayloadHash = async () => {\n  // Owner 2 can now execute the transactions as it already has 2 approvals (from owners 2 and 3).\n  console.log(\n    \"Owner 2 can now execute the transfer with hash transaction as it already has 2 approvals (from owners 2 and 3).\",\n  );\n\n  const createTransactionWithHashRawTransaction = await generateRawTransaction({\n    aptosConfig: config,\n    sender: owner2.accountAddress,\n    payload: transactionPayload,\n  });\n\n  const transaction = new SimpleTransaction(createTransactionWithHashRawTransaction);\n\n  const owner2Authenticator2 = aptos.transaction.sign({\n    signer: owner2,\n    transaction,\n  });\n  const multisigTxExecution2Reponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: owner2Authenticator2,\n    transaction,\n  });\n  await aptos.waitForTransaction({ transactionHash: multisigTxExecution2Reponse.hash });\n};\n\nconst createAddingAnOwnerToMultiSigAccountTransaction = async () => {\n  console.log(\"Adding an owner to the multisig account...\");\n\n  // Generate a transaction payload as it is one of the input arguments create_transaction expects\n  const addOwnerTransactionPayload = await generateTransactionPayload({\n    multisigAddress,\n    function: \"0x1::multisig_account::add_owner\",\n    functionArguments: [owner4.accountAddress],\n    aptosConfig: config,\n  });\n\n  // Build create_transaction transaction\n  const createAddOwnerTransaction = await aptos.transaction.build.simple({\n    sender: owner2.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::create_transaction\",\n      functionArguments: [multisigAddress, addOwnerTransactionPayload.multiSig.transaction_payload.bcsToBytes()],\n    },\n  });\n  // Owner 2 signs the transaction\n  const createAddOwnerTxAuthenticator = aptos.transaction.sign({\n    signer: owner2,\n    transaction: createAddOwnerTransaction,\n  });\n  // Submit the transaction to chain\n  const createAddOwnerTxResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: createAddOwnerTxAuthenticator,\n    transaction: createAddOwnerTransaction,\n  });\n  await aptos.waitForTransaction({ transactionHash: createAddOwnerTxResponse.hash });\n};\n\nconst executeAddingAnOwnerToMultiSigAccountTransaction = async () => {\n  // Owner 2 can now execute the transactions as it already has 2 approvals (from owners 2 and 3).\n  console.log(\n    \"Owner 2 can now execute the adding an owner transaction as it already has 2 approvals (from owners 2 and 3).\",\n  );\n\n  const multisigTxExecution3 = await generateRawTransaction({\n    aptosConfig: config,\n    sender: owner2.accountAddress,\n    payload: new TransactionPayloadMultiSig(new MultiSig(AccountAddress.fromString(multisigAddress))),\n  });\n\n  const transaction = new SimpleTransaction(multisigTxExecution3);\n\n  const owner2Authenticator3 = aptos.transaction.sign({\n    signer: owner2,\n    transaction,\n  });\n  const multisigTxExecution3Reponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: owner2Authenticator3,\n    transaction,\n  });\n  await aptos.waitForTransaction({ transactionHash: multisigTxExecution3Reponse.hash });\n};\n\nconst createRemovingAnOwnerToMultiSigAccount = async () => {\n  console.log(\"Removing an owner from the multisig account...\");\n\n  const removeOwnerPayload = await generateTransactionPayload({\n    multisigAddress,\n    function: \"0x1::multisig_account::remove_owner\",\n    functionArguments: [owner4.accountAddress],\n    aptosConfig: config,\n  });\n\n  // Build create_transaction transaction\n  const removeOwnerTx = await aptos.transaction.build.simple({\n    sender: owner2.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::create_transaction\",\n      functionArguments: [multisigAddress, removeOwnerPayload.multiSig.transaction_payload.bcsToBytes()],\n    },\n  });\n\n  // Owner 2 signs the transaction\n  const createRemoveOwnerTxAuthenticator = aptos.transaction.sign({\n    signer: owner2,\n    transaction: removeOwnerTx,\n  });\n  // Submit the transaction to chain\n  const createRemoveOwnerTxResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: createRemoveOwnerTxAuthenticator,\n    transaction: removeOwnerTx,\n  });\n  await aptos.waitForTransaction({ transactionHash: createRemoveOwnerTxResponse.hash });\n};\n\nconst executeRemovingAnOwnerToMultiSigAccount = async () => {\n  // Owner 2 can now execute the transactions as it already has 2 approvals (from owners 2 and 3).\n  console.log(\n    \"Owner 2 can now execute the removing an owner transaction as it already has 2 approvals (from owners 2 and 3).\",\n  );\n\n  const multisigTxExecution4 = await generateRawTransaction({\n    aptosConfig: config,\n    sender: owner2.accountAddress,\n    payload: new TransactionPayloadMultiSig(new MultiSig(AccountAddress.fromString(multisigAddress))),\n  });\n\n  const transaction = new SimpleTransaction(multisigTxExecution4);\n\n  const owner2Authenticator4 = aptos.transaction.sign({\n    signer: owner2,\n    transaction,\n  });\n  const multisigTxExecution4Reponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: owner2Authenticator4,\n    transaction,\n  });\n  await aptos.waitForTransaction({ transactionHash: multisigTxExecution4Reponse.hash });\n};\n\nconst createChangeSignatureThresholdTransaction = async () => {\n  console.log(\"Changing the signature threshold to 3-of-3...\");\n\n  const changeSigThresholdPayload = await generateTransactionPayload({\n    multisigAddress,\n    function: \"0x1::multisig_account::update_signatures_required\",\n    functionArguments: [3],\n    aptosConfig: config,\n  });\n\n  // Build create_transaction transaction\n  const changeSigThresholdTx = await aptos.transaction.build.simple({\n    sender: owner2.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::create_transaction\",\n      functionArguments: [multisigAddress, changeSigThresholdPayload.multiSig.transaction_payload.bcsToBytes()],\n    },\n  });\n\n  // Owner 2 signs the transaction\n  const changeSigThresholdAuthenticator = aptos.transaction.sign({\n    signer: owner2,\n    transaction: changeSigThresholdTx,\n  });\n  // Submit the transaction to chain\n  const changeSigThresholdResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: changeSigThresholdAuthenticator,\n    transaction: changeSigThresholdTx,\n  });\n  await aptos.waitForTransaction({ transactionHash: changeSigThresholdResponse.hash });\n};\n\nconst executeChangeSignatureThresholdTransaction = async () => {\n  // Owner 2 can now execute the transactions as it already has 2 approvals (from owners 2 and 3).\n  console.log(\n    \"Owner 2 can now execute the change signature threshold transaction as it already has 2 approvals (from owners 2 and 3).\",\n  );\n\n  const multisigTxExecution5 = await generateRawTransaction({\n    aptosConfig: config,\n    sender: owner2.accountAddress,\n    payload: new TransactionPayloadMultiSig(new MultiSig(AccountAddress.fromString(multisigAddress))),\n  });\n\n  const transaction = new SimpleTransaction(multisigTxExecution5);\n\n  const owner2Authenticator5 = aptos.transaction.sign({\n    signer: owner2,\n    transaction,\n  });\n  const multisigTxExecution5Reponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: owner2Authenticator5,\n    transaction,\n  });\n  await aptos.waitForTransaction({ transactionHash: multisigTxExecution5Reponse.hash });\n};\n\nconst rejectAndApprove = async (aprroveOwner: Account, rejectOwner: Account, transactionId: number): Promise<void> => {\n  console.log(\"Owner 1 rejects but owner 3 approves.\");\n  const rejectTx = await aptos.transaction.build.simple({\n    sender: aprroveOwner.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::reject_transaction\",\n      functionArguments: [multisigAddress, transactionId],\n    },\n  });\n\n  const rejectSenderAuthenticator = aptos.transaction.sign({ signer: aprroveOwner, transaction: rejectTx });\n  const rejectTxResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: rejectSenderAuthenticator,\n    transaction: rejectTx,\n  });\n  await aptos.waitForTransaction({ transactionHash: rejectTxResponse.hash });\n\n  const approveTx = await aptos.transaction.build.simple({\n    sender: rejectOwner.accountAddress,\n    data: {\n      function: \"0x1::multisig_account::approve_transaction\",\n      functionArguments: [multisigAddress, transactionId],\n    },\n  });\n\n  const approveSenderAuthenticator = aptos.transaction.sign({ signer: rejectOwner, transaction: approveTx });\n  const approveTxResponse = await aptos.transaction.submit.simple({\n    senderAuthenticator: approveSenderAuthenticator,\n    transaction: approveTx,\n  });\n  await aptos.waitForTransaction({ transactionHash: approveTxResponse.hash });\n};\n\nconst main = async () => {\n  await fundOwnerAccounts();\n  await settingUpMultiSigAccount();\n  await fundMultiSigAccount();\n\n  await createMultiSigTransferTransaction();\n  await rejectAndApprove(owner1, owner3, 1);\n  await executeMultiSigTransferTransaction();\n\n  // should be 1_000_000\n  await checkBalance();\n\n  await createMultiSigTransferTransactionWithPayloadHash();\n  await rejectAndApprove(owner1, owner3, 2);\n  await executeMultiSigTransferTransactionWithPayloadHash();\n\n  // should be 2_000_000\n  await checkBalance();\n\n  await createAddingAnOwnerToMultiSigAccountTransaction();\n  await rejectAndApprove(owner1, owner3, 3);\n  await executeAddingAnOwnerToMultiSigAccountTransaction();\n\n  // should be 4\n  await getNumberOfOwners();\n\n  await createRemovingAnOwnerToMultiSigAccount();\n  await rejectAndApprove(owner1, owner3, 4);\n  await executeRemovingAnOwnerToMultiSigAccount();\n\n  // should be 3\n  await getNumberOfOwners();\n\n  await createChangeSignatureThresholdTransaction();\n  await rejectAndApprove(owner1, owner3, 5);\n  await executeChangeSignatureThresholdTransaction();\n\n  // The multisig account should now be 3-of-3.\n  await getSignatureThreshold();\n\n  console.log(\"Multisig setup and transactions complete.\");\n};\n\n// Start the example\nmain();\n"],"mappings":"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","names":[]}