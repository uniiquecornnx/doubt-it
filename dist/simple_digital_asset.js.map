{"version":3,"sources":["../simple_digital_asset.ts"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\n\n/**\n * This example shows how to use the Aptos client to mint and transfer a Digital Asset.\n */\n\nimport { Account, Aptos, AptosConfig, Network, NetworkToNetworkName } from \"@aptos-labs/ts-sdk\";\nimport \"dotenv\";\n\nconst INITIAL_BALANCE = 100_000_000;\n\n// Setup the client\nconst APTOS_NETWORK: Network = NetworkToNetworkName[process.env.APTOS_NETWORK] || Network.DEVNET;\nconst config = new AptosConfig({ network: APTOS_NETWORK });\nconst aptos = new Aptos(config);\n\nconst example = async () => {\n  console.log(\n    \"This script will create a collection and mint a digital asset, then transfer it to Bob's account once the bot verification is successful.\",\n  );\n\n  // Create Alice and Bob accounts\n  // const alice = Account.generate();\n  const bob = Account.generate();\n\n  console.log(\"===BOB's Address ===\\n\");\n  console.log(`bob's address is: ${bob.accountAddress}`);\n\n  // Fund and create the accounts\n  // await aptos.fundAccount({\n  //   accountAddress: alice.accountAddress,\n  //   amount: INITIAL_BALANCE,\n  // });\n  await aptos.fundAccount({\n    accountAddress: bob.accountAddress,\n    amount: INITIAL_BALANCE,\n  });\n\n  const collectionName = \"Example Collection\";\n  const collectionDescription = \"Example description.\";\n  const collectionURI = \"aptos.dev\";\n\n  // Bot Verification Logic: Simulating bot verification (you can replace this with your actual bot logic)\n  const botVerified = false; // Assume the bot verification is successful\n  if (!botVerified) {\n    console.log(\"Bot verification failed. NFT transfer aborted.\");\n    return;\n  }\n\n  console.log(\"\\n=== Bot Verification Successful: Creating the collection and Minting NFT ===\\n\");\n\n  // Create the collection\n  const createCollectionTransaction = await aptos.createCollectionTransaction({\n    creator: bob,\n    description: collectionDescription,\n    name: collectionName,\n    uri: collectionURI,\n  });\n\n  console.log(\"\\n=== Create the collection ===\\n\");\n  let committedTxn = await aptos.signAndSubmitTransaction({ signer: bob, transaction: createCollectionTransaction });\n\n  let pendingTxn = await aptos.waitForTransaction({ transactionHash: committedTxn.hash });\n\n  const bobsCollection = await aptos.getCollectionData({\n    creatorAddress: bob.accountAddress,\n    collectionName,\n    minimumLedgerVersion: BigInt(pendingTxn.version),\n  });\n  console.log(`bob's collection: ${JSON.stringify(bobsCollection, null, 4)}`);\n\n  const tokenName = \"Example Asset\";\n  const tokenDescription = \"Example asset description.\";\n  const tokenURI = \"aptos.dev/asset\";\n\n  console.log(\"\\n===  Minting the digital asset ===\\n\");\n\n  const mintTokenTransaction = await aptos.mintDigitalAssetTransaction({\n    creator: bob,\n    collection: collectionName,\n    description: tokenDescription,\n    name: tokenName,\n    uri: tokenURI,\n  });\n\n  committedTxn = await aptos.signAndSubmitTransaction({ signer: bob, transaction: mintTokenTransaction });\n  pendingTxn = await aptos.waitForTransaction({ transactionHash: committedTxn.hash });\n\n  const bobsDigitalAsset = await aptos.getOwnedDigitalAssets({\n    ownerAddress: bob.accountAddress,\n    minimumLedgerVersion: BigInt(pendingTxn.version),\n  });\n  console.log(`bob's digital assets balance: ${bobsDigitalAsset.length}`);\n\n  console.log(`bob's digital asset: ${JSON.stringify(bobsDigitalAsset[0], null, 4)}`);\n\n  console.log(\"\\n=== Transfer the digital asset to Bob ===\\n\");\n\n  // const transferTransaction = await aptos.transferDigitalAssetTransaction({\n  //   sender: alice,\n  //   digitalAssetAddress: alicesDigitalAsset[0].token_data_id,\n  //   recipient: bob.accountAddress,\n  // });\n  // committedTxn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: transferTransaction });\n  // pendingTxn = await aptos.waitForTransaction({ transactionHash: committedTxn.hash });\n\n  // const alicesDigitalAssetsAfter = await aptos.getOwnedDigitalAssets({\n  //   ownerAddress: alice.accountAddress,\n  //   minimumLedgerVersion: BigInt(pendingTxn.version),\n  // });\n  // console.log(`Alices's digital assets balance: ${alicesDigitalAssetsAfter.length}`);\n\n  const bobDigitalAssetsAfter = await aptos.getOwnedDigitalAssets({\n    ownerAddress: bob.accountAddress,\n    minimumLedgerVersion: BigInt(pendingTxn.version),\n  });\n  console.log(`Bob's digital assets balance: ${bobDigitalAssetsAfter.length}`);\n};\n\nexample();\n"],"mappings":";AAOA,SAAS,SAAS,OAAO,aAAa,SAAS,4BAA4B;AAC3E,OAAO;AAEP,IAAM,kBAAkB;AAGxB,IAAM,gBAAyB,qBAAqB,QAAQ,IAAI,aAAa,KAAK,QAAQ;AAC1F,IAAM,SAAS,IAAI,YAAY,EAAE,SAAS,cAAc,CAAC;AACzD,IAAM,QAAQ,IAAI,MAAM,MAAM;AAE9B,IAAM,UAAU,YAAY;AAC1B,UAAQ;AAAA,IACN;AAAA,EACF;AAIA,QAAM,MAAM,QAAQ,SAAS;AAE7B,UAAQ,IAAI,wBAAwB;AACpC,UAAQ,IAAI,qBAAqB,IAAI,cAAc,EAAE;AAOrD,QAAM,MAAM,YAAY;AAAA,IACtB,gBAAgB,IAAI;AAAA,IACpB,QAAQ;AAAA,EACV,CAAC;AAED,QAAM,iBAAiB;AACvB,QAAM,wBAAwB;AAC9B,QAAM,gBAAgB;AAGtB,QAAM,cAAc;AACpB,MAAI,CAAC,aAAa;AAChB,YAAQ,IAAI,gDAAgD;AAC5D;AAAA,EACF;AAEA,UAAQ,IAAI,kFAAkF;AAG9F,QAAM,8BAA8B,MAAM,MAAM,4BAA4B;AAAA,IAC1E,SAAS;AAAA,IACT,aAAa;AAAA,IACb,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AAED,UAAQ,IAAI,mCAAmC;AAC/C,MAAI,eAAe,MAAM,MAAM,yBAAyB,EAAE,QAAQ,KAAK,aAAa,4BAA4B,CAAC;AAEjH,MAAI,aAAa,MAAM,MAAM,mBAAmB,EAAE,iBAAiB,aAAa,KAAK,CAAC;AAEtF,QAAM,iBAAiB,MAAM,MAAM,kBAAkB;AAAA,IACnD,gBAAgB,IAAI;AAAA,IACpB;AAAA,IACA,sBAAsB,OAAO,WAAW,OAAO;AAAA,EACjD,CAAC;AACD,UAAQ,IAAI,qBAAqB,KAAK,UAAU,gBAAgB,MAAM,CAAC,CAAC,EAAE;AAE1E,QAAM,YAAY;AAClB,QAAM,mBAAmB;AACzB,QAAM,WAAW;AAEjB,UAAQ,IAAI,wCAAwC;AAEpD,QAAM,uBAAuB,MAAM,MAAM,4BAA4B;AAAA,IACnE,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AAED,iBAAe,MAAM,MAAM,yBAAyB,EAAE,QAAQ,KAAK,aAAa,qBAAqB,CAAC;AACtG,eAAa,MAAM,MAAM,mBAAmB,EAAE,iBAAiB,aAAa,KAAK,CAAC;AAElF,QAAM,mBAAmB,MAAM,MAAM,sBAAsB;AAAA,IACzD,cAAc,IAAI;AAAA,IAClB,sBAAsB,OAAO,WAAW,OAAO;AAAA,EACjD,CAAC;AACD,UAAQ,IAAI,iCAAiC,iBAAiB,MAAM,EAAE;AAEtE,UAAQ,IAAI,wBAAwB,KAAK,UAAU,iBAAiB,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE;AAElF,UAAQ,IAAI,+CAA+C;AAgB3D,QAAM,wBAAwB,MAAM,MAAM,sBAAsB;AAAA,IAC9D,cAAc,IAAI;AAAA,IAClB,sBAAsB,OAAO,WAAW,OAAO;AAAA,EACjD,CAAC;AACD,UAAQ,IAAI,iCAAiC,sBAAsB,MAAM,EAAE;AAC7E;AAEA,QAAQ;","names":[]}